name: CI

on:
  push:
    branches:
      - master

  release:
    types: [published]

  pull_request:

  workflow_dispatch:

env:
  DOCKER_IMAGE: lukeshard/render-template

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    name: Build and Test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Prepare Path for Go
        continue-on-error: true
        shell: bash
        run: |
          export PATH="$GOROOT_1_16_X64:$PATH"
          echo PATH="$GOROOT_1_16_X64:$PATH" >> $GITHUB_ENV
          go get -u golang.org/x/lint/golint
          which golint
      - name: Install Build Dependencies
        run: make get-build-deps
      - name: Download required modules
        run: make download
      - name: Vet
        run: make vet
      - name: Lint
        run: make lint
      - name: Cover
        run: make cover
      - name: Build
        run: |
          set -ex
          for dist in amd64 arm64; do
             target=out/render-template-linux-$dist
             rm -rf "$target"
             make build/$dist TOOL_PATH="$target"
             file $target
             tar -C "$(dirname "$target")" -czf "$target.tar.gz" "$(basename "$target")"
          done
      - uses: actions/upload-artifact@v2
        with:
          name: built-binaries
          path: |
            out/*.tar.gz
  release:
    needs: [ 'build-and-test' ]
    #if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: ./artifacts
      - name: Set tag name
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker meta
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: ${{ env.DOCKER_IMAGE }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.DOCKER_IMAGE }}:latest
      - name: Release
        run: |
          set -e
          create_digest_file() {
              local digest_file=${1:?You must provide the digest file path}
              shift
              for file in "$@"; do
                (
                   cd "$(dirname "$file")"
                   sha256sum "$(basename "$file")"
                ) >> "$digest_file"
              done
          }
          assets=( ./artifacts/built-binaries/*.gz )

          tag_name="${{ steps.vars.outputs.tag }}"
          checksums_file="${tag_name}_checksums.txt"
          create_digest_file "$checksums_file" "${assets[@]}"
          assets+=( "$checksums_file" )
          if gh release view "$tag_name" >/dev/null 2>/dev/null; then
            echo "Release $tag_name already exists. Updating"
            gh release upload "$tag_name" "${assets[@]}"
          else
            echo "Creating new release $tag_name"
            # Format checksums for the release text
            printf '```\n%s\n```' "$(<"$checksums_file")" > release.txt
            gh release create -t "$tag_name" "$tag_name" -F release.txt "${assets[@]}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
